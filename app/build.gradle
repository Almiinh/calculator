/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'calculatrice.Calculatrice'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    archiveFileName = 'Calculatrice.jar'
}

// Configure the Javadoc task
task customJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    options.encoding = 'UTF-8'  // Set the Javadoc encoding to UTF-8
    destinationDir = file("${buildDir}/javadoc")
    classpath += files(sourceSets.main.compileClasspath)
}

// Create a JAR task and include the generated Javadoc
task customJar(type: Jar, dependsOn: customJavadoc) {
    from sourceSets.main.output
    from customJavadoc.destinationDir
    archiveClassifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

// Add dependencies to ensure Javadoc generation before JAR packaging
customJar.dependsOn customJavadoc

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'


